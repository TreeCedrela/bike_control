package com.example.map;

import static com.example.map.Util.DefaultZoom;
import static com.example.map.Util.initLocation;
import static com.example.map.Util.initMap;
import static com.example.map.Util.requestPermission;
import static com.example.map.Util.showMsg;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;


import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps.AMap;
import com.amap.api.maps.CameraUpdate;
import com.amap.api.maps.CameraUpdateFactory;
import com.amap.api.maps.LocationSource;
import com.amap.api.maps.MapView;
import com.amap.api.maps.model.LatLng;
import com.amap.api.services.core.AMapException;
import com.amap.api.services.core.LatLonPoint;
import com.amap.api.services.route.DistanceItem;
import com.amap.api.services.route.DistanceResult;
import com.amap.api.services.route.DistanceSearch;

import java.util.ArrayList;
import java.util.List;

import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.EasyPermissions;

public class MainActivity extends AppCompatActivity implements AMapLocationListener, LocationSource, DistanceSearch.OnDistanceSearchListener {
    public MapView mMapView = null;
    public AMap aMap = null;
    public LocationSource.OnLocationChangedListener mListener = null;


    //声明AMapLocationClient类对象
    public AMapLocationClient mLocationClient = null;
    //声明AMapLocationClientOption对象
    public AMapLocationClientOption mLocationOption = null;

//    public LatLonPoint dstPoint = new LatLonPoint(39.90403, 116.407525);
//    public LatLonPoint currentPoint;
//
//    public DistanceSearch distanceSearch;
//    public List<LatLonPoint> latLonPoints;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button startBt = findViewById(R.id.startButton);
        Button continueLastTimeBt = findViewById(R.id.continueLastTime);
        Button sportRecordBt = findViewById(R.id.sport_record_button);

        // TODO: 2024/9/7 feat blueprint view jump
        Button blueprintBt = findViewById(R.id.blueprint_button);


        startBt.setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, beginActivity.class);
            startActivity(intent);
        });

        continueLastTimeBt.setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, continueActivity.class);
            startActivity(intent);
        });

        sportRecordBt.setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, recordActivity.class);
            startActivity(intent);
        });



        try {
//            mLocationClient = new AMapLocationClient(getApplicationContext());
//            mLocationOption = new AMapLocationClientOption();
//            initLocation(mLocationClient,mLocationOption,this);

            mLocationClient = new AMapLocationClient(getApplicationContext());
            mLocationOption = new AMapLocationClientOption();
            mLocationClient.setLocationListener(this);
            initLocation(mLocationClient,mLocationOption);
//            _initLocation();
        } catch (AMapException e) {
            Log.e("onCreate", "error:", e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        requestPermission(this);

        mLocationClient.startLocation();

        //initMap(savedInstanceState);
        mMapView = findViewById(R.id.map);

        initMap(savedInstanceState,this,mMapView,aMap);


    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //在activity执行onDestroy时执行mMapView.onDestroy()，销毁地图
        mMapView.onDestroy();
    }

    @Override
    protected void onResume() {
        super.onResume();
        //在activity执行onResume时执行mMapView.onResume ()，重新绘制加载地图
        mMapView.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
        //在activity执行onPause时执行mMapView.onPause ()，暂停地图的绘制
        mMapView.onPause();
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，保存地图当前的状态
        mMapView.onSaveInstanceState(outState);
    }


    /**
     * 接收异步返回的定位结果
     */
    @Override
    public void onLocationChanged(AMapLocation aMapLocation) {
        if (aMapLocation != null) {
            if (aMapLocation.getErrorCode() == 0) {
                //地址
                String address = aMapLocation.getAddress();

                //纬度
                double latitude = aMapLocation.getLatitude();
                //经度
                double longitude = aMapLocation.getLongitude();
                //速度
                final float speed = aMapLocation.getSpeed();


                //以下计算距离前的预配置
//                //设置当前为起点
//                currentPoint = new LatLonPoint(latitude, longitude);
//                final DistanceSearch.DistanceQuery distanceQuery = new DistanceSearch.DistanceQuery();
//                latLonPoints.add(currentPoint);
//                distanceQuery.setOrigins(latLonPoints);
//                distanceQuery.setDestination(dstPoint);
//                distanceQuery.setType(DistanceSearch.TYPE_DRIVING_DISTANCE);
//                distanceSearch.calculateRouteDistanceAsyn(distanceQuery);


                String locatedInfo = "纬度:" + latitude + "\n" +
                        "经度:" + longitude + "\n" +
                        "地址:" + address + "\n";

                Log.d("MainActivity", locatedInfo);

                if (mListener != null) {
                    mListener.onLocationChanged(aMapLocation);
                }


            } else {
                //定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。
                Log.e("AmapError", "location Error, ErrCode:"
                        + aMapLocation.getErrorCode() + ", errInfo:"
                        + aMapLocation.getErrorInfo());
            }
        }
    }

    /**
     * 请求权限结果
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        //设置权限请求结果
        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);
    }


    //初始化定位
    private void _initLocation() throws AMapException {
        //初始化定位
        try {

        } catch (Exception e) {
            Log.e("initLocation", "error:", e);
        }
        if (mLocationClient != null) {
            //设置定位回调监听

            //初始化AMapLocationClientOption对象
            mLocationOption = new AMapLocationClientOption();
            //设置定位模式为AMapLocationMode.Hight_Accuracy，高精度模式。
            mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
            //获取最近3s内精度最高的一次定位结果：
            //设置setOnceLocationLatest(boolean b)接口为true，启动定位时SDK会返回最近3s内精度最高的一次定位结果。如果设置其为true，setOnceLocation(boolean b)接口也会被设置为true，反之不会，默认为false。
            mLocationOption.setOnceLocationLatest(true);
            //设置是否返回地址信息（默认返回地址信息）
            mLocationOption.setNeedAddress(true);
            //设置定位请求超时时间，单位是毫秒，默认30000毫秒，建议超时时间不要低于8000毫秒。
            mLocationOption.setHttpTimeOut(20000);
            //关闭缓存机制，高精度定位会产生缓存。
            mLocationOption.setLocationCacheEnable(true);
            mLocationOption.setSensorEnable(true);
            //给定位客户端对象设置定位参数
            mLocationClient.setLocationOption(mLocationOption);


        }
    }

    /**
     * 初始化地图
     */
//    private void initMap(Bundle savedInstanceState) {
//        mMapView = findViewById(R.id.map);
//        //在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，创建地图
//        mMapView.onCreate(savedInstanceState);
//
//
//        //初始化地图控制器对象
//        aMap = mMapView.getMap();
//
//        // 设置定位监听
//        aMap.setLocationSource(this);
//
//        // 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false
//        aMap.setMyLocationEnabled(true);
//
//        //设置希望展示的地图缩放级别
//        CameraUpdate mCameraUpdate = CameraUpdateFactory.zoomTo(DefaultZoom);
//        aMap.moveCamera(mCameraUpdate);
//    }

    /**
     * 激活定位
     */
    @Override
    public void activate(OnLocationChangedListener onLocationChangedListener) {
        mListener = onLocationChangedListener;
        if (mLocationClient != null) {
            mLocationClient.startLocation();//启动定位
        }
    }

    /**
     * 停止定位
     */
    @Override
    public void deactivate() {
        mListener = null;
        if (mLocationClient != null) {
            mLocationClient.stopLocation();
            mLocationClient.onDestroy();
        }
        mLocationClient = null;
    }

    @Override
    public void onDistanceSearched(DistanceResult distanceResult, int i) {
        final List<DistanceItem> distanceResults = distanceResult.getDistanceResults();
        final DistanceItem distanceItem = distanceResults.get(0);
        final float distance = distanceItem.getDistance();
        final float duration = distanceItem.getDuration();
        Log.d("Distance and duration:", distance + "::" + duration);
    }
}
